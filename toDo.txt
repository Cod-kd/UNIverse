JavaScript file:
    (DONE)  -Format + Optimize
    (DONE)  -Add comments
    (DONE)  -Separate code into more functions (optional)
    (DONE)  -Make the code more readable
    (DONE)  -Create a button with a home icon => when pressed, the Registration + Login buttons will be rendered on the screen
    -add descriptive comments to the FINAL code
    (DONE)    -check on the hasDrawn variable inside setupSignature function (necessary?)
    (DONE)    -modify the existing functions and remove their unnecessary parameters
    (DONE)    -change the console.errors into a better feature
    (DONE)    -make the code smaller, especially the fetches and functions that use the same logic (check for existing email/username function)
    
    -Debugging:
    (DONE)    -add a variable named success (boolean)
    (DONE)    -if the registration is successful => display the successful animation (samples)
    (DONE)    -else => display the error animation (samples)
    (DONE)    -add form validation to all inputs
    (DONE)    -add an inputInfoDiv which displays informations about the current input (eg. max length, min length, needs to include this/that etc.)
    (DONE)    -add id to all inputs for further PHP actions
    (DISMISSED)    -add drag&drop interactivity to the infoCards => user can have "fun" with the cards
    (DONE)    -if a condition isn't met => the condition should stay in place
    (DONE)    -if a condition is met => the condition should be removed with the disappear
    (DONE)    -if a previous condition was met before, but now it's not met => that specified condition should appear with the appear animation
    (DONE)    -add a fetch method with the createProfile.php, assign the correct animations
    -split the main javascript file into small javascript files (separation like css)
    -upon registration completion, the user can save their 'UNIverse Card' (an imagine which replicates a small login card with the user's data on it) =>
        users can login via their cards (upload their card image)
        (DONE)-Saving steps: 1. The user enters his/her data through the registration.
        (DONE)        2. The registration was complete => a button appears saying "Get my UNIverse Card" + the card appears with the user's informations + informations are saved to database
        (DONE)        3. Upon "Get card" button press => user's "UNIverse Card" will be saved on the user's device, simultaneously the card is hashed to HEX value and saved into the user's record
    (DONE)    -add a customized 'symbol' to every card so other user's can't replicate each others' cards (pin code, QR code, custom image)
        -Login steps via UNIverse Card:
            1. The user uploads his/her saved UNIverse Card
            2. The email address is read from the card
            3. The program checks that the email is present in the database
            4. If present => the uploaded UNIverse Card is hashed to hex => if the uploaded image's hex is similar to the user's image hex in the database => Successful login
            5. If the email is present + user uploaded wrong image => Unsuccessful login
            6. If the email isnt present => user isn't registrated
            7. If an email isn't present on the card => wrong card
    (DONE)    -change the inputDetails div's width and position at the passwordInput part
    (DISMISSED)    -add the loading animation while communicating with the server
    (DONE)    -add the cursor loading effect while fetching the createProfile.php
    (DONE)    -fix the signature part of the registration => users shouldn't be able to click continueBtn if they havent drawn aynthing
    (EXTRA)    -add new feature => every continueBtn should be disabled by default => if the current's input's validation is correct => enable, at signature and UNIcard, only enable if signature was drawn / unicard was saved
CSS:
    (CAN'T FINISH DUE TO BUG)   -change the radio button's "circle"'s center so the black circle inside is centered horizontally + vertically
    (DONE)    -add floating effect to the infoCards => replicates that they can be dragged
    -make the page responsive (bootstrap?)
    (DONE)    -check for unused css selectors and remove / change them
    (DONE)    -fix the backBtn's rotation to 180 degrees

PHP:
    (DONE)    -create createProfile.php for testing the connection with javascript fetch
    (DONE)    -add the javascript registration informations to the database upon fetching
        (DONE)    -the inputted email adress's value (is it already present in users table? => if yes => response to use another email)
        (DONE)    -the inputted username's value (only accept if it isnt present in the users table)
        (DONE)    -LOGIC: 1 php file named checkExistingUser => the email / username is sent via the fetch and an SQL query is ran to check the availability of the value:
        (DONE)    -return true if it isnt present in users table
        (DONE)    -else return false
        (DONE)    -if true was returned => user can click the continueBtn
    (DONE)    -merge the checkExistingUsername.php with the checkExistingEmail.php
    (DONE)    -store the password in a more secure way (hash) inside database
    (DONE)    -when a user is created => created_at column should have the NOW() value
    (DONE)    -when the checkExistence.php runs => it should only check the records where deleted_at is null

Quick fixes:
    (DONE)    -backBtn isnt working while UNIcard is present
    (DONE)    -when backBtn is pressed on the last page of registration => UNIcard instantly appears (animation is missing)
    (DONE)    -nothing happens when the user clicks registerBtn
    (DONE)    -the imagePasswd isnt saved into the database
    (DONE)    -add the .button class to the reset signature button
    (DONE)    -when the reset button is pressed at the signature part it says "continueBtn is not defined at registerloginbtn.js 1005th row"
    (DONE)    -continueBtn shouldn't be available until a signature was drawn on the signatureCanvas
    (DONE)    -console log the final formData's values upon registerBtn press + ?add missing formData attribute called "imgPass" => this stores the UNIcard's hashed hex code?
    (DONE)    -when the user hovers the continueBtn at the signature part of the registration => animation plays, but it shouldn't (continueBtn is only disabled when user clicks it)
    (DONE)    -remove the unnecessary "center-con" div (#continueBtn / #backBtn is enough, no extra div needed)
    (DONE)    -rename the css selectors in the #continueBtn + #backBtn
    (DONE)    -check on the validation functions
    (DONE)    -signature doesn't appear on live server
    (DONE)    -registration data isnt getting posted into the database
    (DONE)    -gender data isnt saved, not on UNIcard, nor at registration
    -age shold be between 18 and 100 is an ignored condition
    -passwordInput too long
    -emailInput + usernameInput isnt inserted to the database

Live server debugging errors:
    (DONE)    -can't download UNIcard's image from live server
        -solutions:
        (DONE)    -allow 443 port for https in firewall
        (DONE)    -change hosted website from http to https => avoid conflicts while getting resources from HTTPS website while the main site is http

Login:
    (DONE)    -2 inputs should appear (username/email + password)
    (DONE)    -2 buttons should appear (Login via UNIcard + Login)
    -when simple Login is pressed => login.php checks for available username/email + entered password compared to correct password
        -email/username isn't present in database
        -entered password doesn't match correct password
    -when Login via UNIcard is pressed =>:
        -1. Email is read from the uploaded card
        -2. Uploaded image gets hashed into HEX
        -3. Login.php checks for the email in the database + hashed image's hex matches the email's imgPasswd
    (EXTRA/LATER)-Features:
        -forgotten password - email is sent out to user which contains a link => link is opened => user is redirected to an email restoring site
            -opened website = form (2 inputs, password, newPassword) => updatePassword.php runs => updates the current user's password
            -extras - token validation --> only the user can open that link and that link is only accessible for X minutes